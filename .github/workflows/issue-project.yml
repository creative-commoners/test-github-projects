name: Issue project

# This workflow is just being used for testing purposes

# https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions

on:
  issues:
    # types: [opened]
    types: [opened,edited]
jobs:
  add-to-project:
    name: Add issue to project
    runs-on: ubuntu-latest
    steps:
      - name: Do the things
        env:
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.TEST_GITHUB_PROJECTS_TOKEN }}
          ORGANIZATION: creative-commoners
          PROJECT_NUMBER: 1
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "ISSUE_NODE_ID is $ISSUE_NODE_ID"
          echo "Running query 01"
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          # cat project_data.json

          echo 'PROJECT_ID='$(jq -r '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          # echo 'DATE_FIELD_ID='$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
          # echo 'STATUS_FIELD_ID='$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          # echo 'TODO_OPTION_ID='$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV

          echo "PROJECT_ID is $PROJECT_ID"
          rm project_data.json

          # Get issue node_id from rest api
          # echo "Running query 02"
          # ISSUE_ID=$(gh api repos/$GITHUB_REPOSITORY/issues/$ISSUE_NUMBER --jq '.node_id')
          
          # Add issue to project via graphql api
          echo "Running query 03"
          ITEM_ID="$(gh api graphql -f query='
            mutation($projectId:ID!, $contentId:ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f contentId=$ISSUE_NODE_ID --jq '.data.addProjectV2ItemById.item.id')"
          echo "ITEM_ID is $ITEM_ID"
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
